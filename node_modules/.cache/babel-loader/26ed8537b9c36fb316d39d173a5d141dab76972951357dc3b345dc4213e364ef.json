{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Libertas\\\\Desktop\\\\ATG_Project-deneme2\\\\project\\\\website\\\\src\\\\components\\\\upload.js\";\nimport React, { Component } from \"react\";\nimport { Button, FormGroup, Input, Table } from \"reactstrap\";\nimport * as XLSX from 'xlsx';\nimport './css/upload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Upload extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      xlsxData: [],\n      fileName: ''\n    };\n    this.handleFile = event => {\n      const file = event.target.files[0];\n      if (file.name.includes(\".xlsx\")) this.convertExcelToJson(file);else {\n        alert(\"Sadece xlsx uzantılı dosyalar listelenir\");\n      }\n    };\n    this.clearInput = () => {\n      document.querySelector(\".fileInput\").value = \"\";\n      this.setState({\n        xlsxData: []\n      });\n    };\n    this.convertJsonToExcel = () => {};\n    this.pushDataToTable = data => {\n      const {\n        paths,\n        url\n      } = this.props;\n      const fetchUrl = url + paths.insert;\n      data.forEach(e => {\n        let body = {\n          LanguageCode: e.LanguageCode,\n          PageName: e.PageName,\n          ResourceCode: e.ResourceCode,\n          Resource: e.Resource\n        };\n        let options = {\n          method: 'POST',\n          headers: {\n            \"Content-type\": \"Application/json\"\n          },\n          body: JSON.stringify(body)\n        };\n        fetch(fetchUrl, options).then(resp => resp.json()).then(resp => console.log(resp));\n      });\n    };\n    this.convertExcelToJson = file => {\n      try {\n        const reader = new FileReader();\n        reader.onload = event => {\n          let data = event.target.result;\n          let workbook = XLSX.read(data, {\n            type: 'binary'\n          });\n          let tempData = [];\n          workbook.SheetNames.forEach(entry => {\n            let worksheet = workbook.Sheets[entry];\n            let xlsxData = XLSX.utils.sheet_to_json(worksheet, {\n              raw: false\n            });\n            tempData.push(xlsxData);\n            console.log(xlsxData);\n          });\n          this.setState({\n            xlsxData: tempData[0]\n          });\n        };\n        reader.readAsBinaryString(file);\n      } catch (err) {\n        alert(\"Yüklenen dosya xlsx olmalı\");\n      }\n    };\n  }\n  render() {\n    const {\n      fileName,\n      xlsxData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uploadMain\",\n      hidden: this.props.isUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined close\",\n        onClick: () => {\n          this.props.setUploadState(!this.props.isUpload);\n          this.clearInput();\n        },\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploadContainer\",\n        children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            className: \"fileInput\",\n            type: \"file\",\n            id: \"fileInput\",\n            onChange: this.handleFile,\n            accept: \".xlsx\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), xlsxData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"previewTable\",\n          children: [/*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: Object.keys(xlsxData[0]).map((e, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"xlsxTableHeaders\",\n                  children: e\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: Object.values(xlsxData).map((e, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                style: {\n                  height: 100,\n                  wordBreak: \"break-all\"\n                },\n                children: Object.values(e).map((j, key) => /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"uploadTableItem\",\n                  children: j\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 45\n                }, this))\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pushButtons\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"success\",\n              onClick: () => {\n                this.pushDataToTable(xlsxData);\n              },\n              children: \"Upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"dark\",\n              children: \"Clear\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"logAnnouncer\",\n            children: [xlsxData.length, \" adet kay\\u0131t girildi\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Button","FormGroup","Input","Table","XLSX","jsxDEV","_jsxDEV","Upload","constructor","args","state","xlsxData","fileName","handleFile","event","file","target","files","name","includes","convertExcelToJson","alert","clearInput","document","querySelector","value","setState","convertJsonToExcel","pushDataToTable","data","paths","url","props","fetchUrl","insert","forEach","e","body","LanguageCode","PageName","ResourceCode","Resource","options","method","headers","JSON","stringify","fetch","then","resp","json","console","log","reader","FileReader","onload","result","workbook","read","type","tempData","SheetNames","entry","worksheet","Sheets","utils","sheet_to_json","raw","push","readAsBinaryString","err","render","className","hidden","isUpload","children","onClick","setUploadState","_jsxFileName","lineNumber","columnNumber","id","onChange","accept","length","Object","keys","map","index","values","style","height","wordBreak","j","key","color"],"sources":["C:/Users/Libertas/Desktop/ATG_Project-deneme2/project/website/src/components/upload.js"],"sourcesContent":["\r\nimport React, { Component } from \"react\";\r\nimport { Button, FormGroup, Input, Table } from \"reactstrap\";\r\nimport * as XLSX from 'xlsx';\r\nimport './css/upload.css';\r\n\r\nexport default class Upload extends Component {\r\n    state = {\r\n        xlsxData: [],\r\n        fileName: ''\r\n    };\r\n\r\n    handleFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file.name.includes(\".xlsx\"))\r\n            this.convertExcelToJson(file);\r\n        else {\r\n            alert(\"Sadece xlsx uzantılı dosyalar listelenir\")\r\n        }\r\n    };\r\n\r\n\r\n\r\n    clearInput = () => {\r\n        document.querySelector(\".fileInput\").value = \"\"\r\n        this.setState({ xlsxData: [] })\r\n    }\r\n\r\n\r\n\r\n    convertJsonToExcel = () =>{\r\n        \r\n    }\r\n\r\n\r\n\r\n    pushDataToTable = data =>{\r\n        const { paths , url } = this.props\r\n        const fetchUrl = url + paths.insert\r\n        data.forEach((e)=>{\r\n            let body = {\r\n                LanguageCode : e.LanguageCode,\r\n                PageName : e.PageName,\r\n                ResourceCode : e.ResourceCode,\r\n                Resource : e.Resource\r\n            }\r\n\r\n\r\n            let options = {\r\n                method : 'POST',\r\n                headers : {\r\n                    \"Content-type\" : \"Application/json\"\r\n                },\r\n                body : JSON.stringify(body)\r\n            }\r\n\r\n\r\n\r\n\r\n            fetch(fetchUrl,options)\r\n            .then(resp=>resp.json())\r\n            .then(resp=>console.log(resp))\r\n        })\r\n    }\r\n\r\n    convertExcelToJson = (file) => {\r\n\r\n\r\n        try {\r\n            const reader = new FileReader();\r\n\r\n\r\n            reader.onload = (event) => {\r\n                let data = event.target.result;\r\n                let workbook = XLSX.read(data, { type: 'binary' });\r\n                let tempData = [];\r\n                workbook.SheetNames.forEach((entry) => {\r\n                    let worksheet = workbook.Sheets[entry];\r\n                    let xlsxData = XLSX.utils.sheet_to_json(worksheet, { raw: false });\r\n                    tempData.push(xlsxData);\r\n                    console.log(xlsxData);\r\n                });\r\n                this.setState({ xlsxData: tempData[0] });\r\n            };\r\n            reader.readAsBinaryString(file);\r\n        }\r\n        catch (err) {\r\n            alert(\"Yüklenen dosya xlsx olmalı\")\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { fileName, xlsxData } = this.state;\r\n\r\n        return (\r\n            <div className=\"uploadMain\" hidden={this.props.isUpload}>\r\n                <span\r\n                    className=\"material-symbols-outlined close\"\r\n                    onClick={() => { this.props.setUploadState(!this.props.isUpload); this.clearInput() }}\r\n                >\r\n                    close\r\n                </span>\r\n                <div className=\"uploadContainer\">\r\n                    <FormGroup>\r\n                        <Input\r\n                            className=\"fileInput\"\r\n                            type=\"file\"\r\n                            id=\"fileInput\"\r\n                            onChange={this.handleFile}\r\n                            accept=\".xlsx\"\r\n                        />\r\n                    </FormGroup>\r\n                    {xlsxData.length > 0 && (\r\n                        <div className=\"previewTable\">\r\n                            <Table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        {Object.keys(xlsxData[0]).map((e, index) => (\r\n                                            <th key={index} className=\"xlsxTableHeaders\">{e}</th>\r\n                                        ))}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {Object.values(xlsxData).map((e, index) => (\r\n                                        <tr key={index} style={{height:100,wordBreak:\"break-all\"}}>\r\n                                            {Object.values(e).map((j, key) => (\r\n                                            <td\r\n                                             key={key}\r\n                                             className=\"uploadTableItem\"\r\n                                             >{j}</td>\r\n                                            \r\n                                            ))}\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <div className=\"pushButtons\">\r\n                                <Button\r\n                                 color=\"success\"\r\n                                 onClick={()=>{this.pushDataToTable(xlsxData)}}\r\n                                >Upload</Button>\r\n                                <Button\r\n                                    color=\"dark\"\r\n                                >Clear</Button>\r\n                            </div>\r\n                            <span className=\"logAnnouncer\">\r\n                                {xlsxData.length} adet kayıt girildi\r\n                            </span>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}