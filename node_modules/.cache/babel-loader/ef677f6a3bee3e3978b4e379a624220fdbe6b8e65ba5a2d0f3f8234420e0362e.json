{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Libertas\\\\Desktop\\\\ATG_Project-deneme2\\\\project\\\\website\\\\src\\\\components\\\\update.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport './css/update.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class update extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      updateState: this.props.isUpdate,\n      customerData: {},\n      inserted: false,\n      url: \"http://localhost:4444\",\n      paths: {\n        update: \"/update/\"\n      }\n    };\n    this.updateUser = async () => {\n      const {\n        url,\n        paths\n      } = this.state;\n      const elements = document.querySelectorAll(\".updateBoxes\");\n      const {\n        customer\n      } = this.props;\n      const {\n        customerData\n      } = this.state;\n      let tempArray = {\n        name: customerData.name,\n        country: customerData.country,\n        salary: customerData.salary,\n        profession: customerData.profession\n      };\n      elements.forEach((e, index) => {\n        if (e.value.trim() !== \"\") {\n          let key = Object.keys(tempArray)[index];\n          tempArray[key] = e.value;\n        }\n      });\n      this.setState({\n        inserted: !this.state.inserted\n      });\n      let options = {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"Application/json\"\n        },\n        body: JSON.stringify(tempArray)\n      };\n      let fetchUrl = url + paths.update + customer.id;\n      await fetch(fetchUrl, options).then(resp => resp.json()).then(resp => console.log(resp));\n      this.updateTexts();\n      this.props.getCustomers();\n    };\n    this.updateTexts = () => {\n      const elements = document.querySelectorAll(\".data\");\n      const inputs = document.querySelectorAll(\".updateBoxes\");\n      let data = [];\n      inputs.forEach(e => data.push(e.value));\n      elements.forEach((e, index) => {\n        console.log(data[index]);\n        e.innerText = data[index] !== \"\" ? data[index] : Object.values(this.props.customer)[index + 1];\n      });\n    };\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", event => {\n      if (!this.props.isUpdate) {\n        if (event.key === \"Escape\") this.props.updateScreenState(!this.props.isUpdate);\n      }\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.inserted !== prevState.inserted) {\n      this.props.getCustomers();\n    }\n  }\n  render() {\n    const {\n      updateScreenState,\n      isUpdate,\n      customer\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainContainer\",\n      hidden: isUpdate,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined icon\",\n        onClick: () => {\n          updateScreenState(!isUpdate);\n        },\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"updateContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"customerData\",\n          children: Object.keys(customer).map((e, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontWeight: 700\n            },\n            children: [e.charAt(0).toUpperCase() + e.slice(1).toLowerCase() + \" : \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: index > 0 ? \"data\" : \"id\",\n              style: {\n                fontWeight: 500\n              },\n              children: Object.values(customer)[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 92\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"updateInput\",\n          children: [Object.values(customer).map((e, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            className: index > 0 ? 'updateBoxes' : \"Id\",\n            style: {\n              outline: \"none\"\n            },\n            placeholder: e\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            color: \"dark\",\n            onClick: () => {\n              this.updateUser();\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 26\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Button","jsxDEV","_jsxDEV","update","constructor","args","state","updateState","props","isUpdate","customerData","inserted","url","paths","updateUser","elements","document","querySelectorAll","customer","tempArray","name","country","salary","profession","forEach","e","index","value","trim","key","Object","keys","setState","options","method","headers","body","JSON","stringify","fetchUrl","id","fetch","then","resp","json","console","log","updateTexts","getCustomers","inputs","data","push","innerText","values","componentDidMount","addEventListener","event","updateScreenState","componentDidUpdate","prevProps","prevState","render","className","hidden","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","style","fontWeight","charAt","toUpperCase","slice","toLowerCase","outline","placeholder","color"],"sources":["C:/Users/Libertas/Desktop/ATG_Project-deneme2/project/website/src/components/update.js"],"sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport { Button } from 'reactstrap'\r\nimport './css/update.css'\r\nexport default class update extends Component {\r\n    \r\n\r\n    state = {\r\n        updateState: this.props.isUpdate,\r\n        customerData : {},\r\n        inserted : false,\r\n        url : \"http://localhost:4444\",\r\n        paths : {\r\n            update : \"/update/\"\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", (event) => {\r\n            if (!this.props.isUpdate) {\r\n                if (event.key === \"Escape\") this.props.updateScreenState(!this.props.isUpdate)\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps,prevState){\r\n        if(this.state.inserted!==prevState.inserted){\r\n            this.props.getCustomers()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    updateUser = async () =>{\r\n        const { url,paths } = this.state\r\n\r\n        const elements = document.querySelectorAll(\".updateBoxes\")\r\n        const { customer } = this.props\r\n        const { customerData } =this.state\r\n        let tempArray = {\r\n            name : customerData.name,\r\n            country : customerData.country,\r\n            salary : customerData.salary,\r\n            profession : customerData.profession\r\n        }\r\n        \r\n\r\n        elements.forEach((e,index)=>{\r\n            \r\n            \r\n            if((e.value.trim() !==\"\")){\r\n            \r\n\r\n                let key = Object.keys(tempArray)[index];\r\n                tempArray[key] = e.value\r\n               \r\n                \r\n            }\r\n        })\r\n       \r\n\r\n        this.setState({inserted : !this.state.inserted})\r\n\r\n\r\n\r\n        \r\n        \r\n        let options = {\r\n            method : \"POST\",\r\n            headers : {\r\n                \"Content-type\" : \"Application/json\"\r\n            },\r\n            body : JSON.stringify(tempArray)\r\n        }\r\n\r\n\r\n        let fetchUrl = url + paths.update + customer.id\r\n        \r\n        await fetch(fetchUrl,options).then(resp=>resp.json()).then(resp=>console.log(resp))\r\n\r\n        this.updateTexts()\r\n        this.props.getCustomers()\r\n    }\r\n\r\n    updateTexts = () =>{\r\n        \r\n\r\n\r\n        const elements = document.querySelectorAll(\".data\")\r\n        const inputs = document.querySelectorAll(\".updateBoxes\")\r\n\r\n        let data = [];\r\n\r\n\r\n        inputs.forEach(e=>data.push(e.value))\r\n\r\n        \r\n        elements.forEach((e,index)=>{\r\n            console.log(data[index])\r\n            e.innerText =  data[index] !== \"\" ? data[index] : Object.values(this.props.customer)[index + 1]\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        const { updateScreenState, isUpdate, customer } = this.props\r\n        \r\n\r\n        return (\r\n\r\n\r\n\r\n\r\n            <div\r\n                className='mainContainer'\r\n                hidden={isUpdate}\r\n            >\r\n                <span className='material-symbols-outlined icon'\r\n                    onClick={() => {\r\n                        updateScreenState(!isUpdate)\r\n                    }}\r\n                >close</span>\r\n                <div className='updateContainer'>\r\n                    <div className='customerData'>\r\n                        {Object.keys(customer).map((e, index) => (\r\n                            <p\r\n                                \r\n                                style={{ fontWeight: 700 }}\r\n                                key={index}\r\n                            >{e.charAt(0).toUpperCase() + e.slice(1).toLowerCase() + \" : \"}<span className={index > 0 ? \"data\" : \"id\"} style={{ fontWeight: 500 }}>{Object.values(customer)[index]}</span></p>\r\n                        ))}\r\n                    </div>\r\n\r\n\r\n                    <div className='updateInput'>\r\n                        {Object.values(customer).map((e, index) => (\r\n                            <input\r\n                                key={index}\r\n                                className={index > 0 ? 'updateBoxes' : \"Id\"}\r\n                                style={{ outline: \"none\" }}\r\n                                placeholder={e}\r\n                            ></input>\r\n                        ))}\r\n\r\n                        <button\r\n                            color={\"dark\"}\r\n                            onClick={()=>{this.updateUser();}}\r\n                        ><span className='material-symbols-outlined'>edit</span></button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}