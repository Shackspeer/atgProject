{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Libertas\\\\Desktop\\\\ATG_Project-deneme2\\\\project\\\\website\\\\src\\\\components\\\\upload.js\";\nimport React, { Component } from \"react\";\nimport { FormGroup, CustomInput, Input, InputGroupText, Label } from \"reactstrap\";\nimport { read, utils } from 'xlsx';\nimport './css/upload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class upload extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      xlsxData: [],\n      fileName: ''\n    };\n    this.handleFile = event => {\n      const file = event.target.files[0];\n      this.convertExcelToJson(file);\n    };\n    this.get_xlsx_data = () => {};\n    this.convertExcelToJson = file => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        let data = event.target.result;\n        let workbook = read(data, {\n          type: 'binary'\n        });\n        let tempData = [];\n        workbook.SheetNames.forEach(entry => {\n          let worksheet = workbook.SheetNames[entry];\n          let xlsxData = utils.sheet_to_json(worksheet, {\n            raw: false\n          });\n          tempData.push(xlsxData);\n        });\n        this.setState({\n          xlsxData: tempData\n        });\n      };\n      reader.readAsBinaryString(file);\n    };\n  }\n  componentDidMount() {}\n  render() {\n    const {\n      fileName\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uploadMain\",\n      hidden: this.props.isUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined close\",\n        onClick: () => {\n          this.props.setUploadState(!this.props.isUpload);\n        },\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploadContainer\",\n        children: /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            className: \"fileInput\",\n            type: \"file\",\n            id: \"fileInput\",\n            onChange: this.handleFile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","FormGroup","CustomInput","Input","InputGroupText","Label","read","utils","jsxDEV","_jsxDEV","upload","constructor","args","state","xlsxData","fileName","handleFile","event","file","target","files","convertExcelToJson","get_xlsx_data","reader","FileReader","onload","data","result","workbook","type","tempData","SheetNames","forEach","entry","worksheet","sheet_to_json","raw","push","setState","readAsBinaryString","componentDidMount","render","className","hidden","props","isUpload","children","onClick","setUploadState","_jsxFileName","lineNumber","columnNumber","id","onChange"],"sources":["C:/Users/Libertas/Desktop/ATG_Project-deneme2/project/website/src/components/upload.js"],"sourcesContent":["import React , { Component } from \"react\";\r\nimport { FormGroup,CustomInput, Input, InputGroupText, Label } from \"reactstrap\";\r\nimport  {read,utils} from 'xlsx';\r\n\r\nimport './css/upload.css'\r\n\r\nexport default class upload extends Component {\r\n    \r\n    state = {\r\n        xlsxData : [],\r\n        fileName : ''\r\n    }\r\n    \r\n\r\n    handleFile = event =>{\r\n        const file = event.target.files[0]\r\n        this.convertExcelToJson(file)\r\n    }\r\n\r\n\r\n\r\n    get_xlsx_data = () =>{\r\n\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        \r\n    }\r\n    \r\n\r\n    convertExcelToJson = file =>{\r\n        const reader = new FileReader();\r\n        reader.onload = (event) =>{\r\n           let data = event.target.result\r\n           let workbook = read(data,{type : 'binary'})\r\n           let tempData = []\r\n           workbook.SheetNames.forEach(entry=>{\r\n            let worksheet = workbook.SheetNames[entry]\r\n            let xlsxData = utils.sheet_to_json(worksheet,{raw:false})\r\n            tempData.push(xlsxData)\r\n           })\r\n           this.setState({xlsxData : tempData})\r\n        }\r\n        reader.readAsBinaryString(file);\r\n    }\r\n\r\n    \r\n    \r\n    render(){\r\n        const { fileName } = this.state\r\n    \r\n        \r\n\r\n        return(\r\n            <div className=\"uploadMain\" hidden={this.props.isUpload}>\r\n                <span\r\n                    className=\"material-symbols-outlined close\"\r\n                    onClick={()=>{this.props.setUploadState(!this.props.isUpload)}}\r\n                >   \r\n                    close\r\n                </span>\r\n                <div className=\"uploadContainer\">\r\n                    <FormGroup>\r\n                        \r\n                        <Input\r\n                            className=\"fileInput\"\r\n                            type=\"file\"\r\n                            id=\"fileInput\"\r\n                            onChange={this.handleFile}\r\n                        ></Input>\r\n                        \r\n                    </FormGroup>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}