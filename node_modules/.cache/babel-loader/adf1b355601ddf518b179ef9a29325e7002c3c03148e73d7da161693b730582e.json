{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Libertas\\\\Desktop\\\\ATG_Project-deneme2\\\\project\\\\website\\\\src\\\\components\\\\update.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport './css/update.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class update extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      updateState: this.props.isUpdate,\n      customerData: []\n    };\n    this.updateUser = () => {\n      const elements = document.querySelectorAll(\".updateBoxes\");\n      const {\n        customer\n      } = this.props;\n      const {\n        customerData\n      } = this.state;\n      let tempArray = {\n        name: customerData.name,\n        country: customerData.country,\n        salary: customerData.salary,\n        profession: customerData.profession\n      };\n      elements.forEach((e, index) => {\n        if (e.value.trim() !== \"\") {\n          let key = Object.keys(tempArray)[index];\n          tempArray[key] = e.value;\n        }\n      });\n      this.setState({\n        customerData: tempArray\n      });\n      let options = {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"Application/json\"\n        },\n        body: JSON.stringify(tempArray)\n      };\n      fetch(`http://localhost:4444/update/${customer.id}`, options).then(resp => resp.json()).then(resp => console.log(resp));\n    };\n  }\n  componentDidMount() {\n    this.state.customerData.push({\n      id: Object.values(this.props.customer)[0],\n      name: Object.values(this.props.customer)[1],\n      country: Object.values(this.props.customer)[2],\n      salary: Object.values(this.props.customer)[3],\n      profession: Object.values(this.props.customer)[4]\n    });\n    document.addEventListener(\"keydown\", event => {\n      if (!this.props.isUpdate) {\n        if (event.key === \"Escape\") this.props.updateScreenState(!this.props.isUpdate);\n      }\n    });\n  }\n  render() {\n    const {\n      updateScreenState,\n      isUpdate,\n      customer\n    } = this.props;\n    const {\n      customerData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainContainer\",\n      hidden: isUpdate,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined icon\",\n        onClick: () => {\n          updateScreenState(!isUpdate);\n        },\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"updateContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"customerData\",\n          children: Object.keys(customerData).map((e, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontWeight: 700\n            },\n            children: [e.charAt(0).toUpperCase() + e.slice(1).toLowerCase() + \" : \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: 500\n              },\n              children: Object.values(customer)[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 92\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"updateInput\",\n          children: [Object.values(customerData).map((e, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            className: index > 0 ? 'updateBoxes' : \"Id\",\n            style: {\n              outline: \"none\"\n            },\n            placeholder: e\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"dark\",\n            onClick: () => console.log(customerData),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 26\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Button","jsxDEV","_jsxDEV","update","constructor","args","state","updateState","props","isUpdate","customerData","updateUser","elements","document","querySelectorAll","customer","tempArray","name","country","salary","profession","forEach","e","index","value","trim","key","Object","keys","setState","options","method","headers","body","JSON","stringify","fetch","id","then","resp","json","console","log","componentDidMount","push","values","addEventListener","event","updateScreenState","render","className","hidden","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","style","fontWeight","charAt","toUpperCase","slice","toLowerCase","outline","placeholder","color"],"sources":["C:/Users/Libertas/Desktop/ATG_Project-deneme2/project/website/src/components/update.js"],"sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport { Button } from 'reactstrap'\r\nimport './css/update.css'\r\nexport default class update extends Component {\r\n    \r\n\r\n    state = {\r\n        updateState: this.props.isUpdate,\r\n        customerData : []\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.state.customerData.push({\r\n            id : Object.values(this.props.customer)[0],\r\n            name : Object.values(this.props.customer)[1],\r\n            country : Object.values(this.props.customer)[2],\r\n            salary : Object.values(this.props.customer)[3],\r\n            profession : Object.values(this.props.customer)[4]\r\n        })\r\n\r\n        document.addEventListener(\"keydown\", (event) => {\r\n            if (!this.props.isUpdate) {\r\n                if (event.key === \"Escape\") this.props.updateScreenState(!this.props.isUpdate)\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    updateUser = () =>{\r\n        const elements = document.querySelectorAll(\".updateBoxes\")\r\n        const { customer } = this.props\r\n        const { customerData } =this.state\r\n        let tempArray = {\r\n            name : customerData.name,\r\n            country : customerData.country,\r\n            salary : customerData.salary,\r\n            profession : customerData.profession\r\n        }\r\n        \r\n        elements.forEach((e,index)=>{\r\n            \r\n            \r\n            if((e.value.trim() !==\"\")){\r\n            \r\n\r\n                let key = Object.keys(tempArray)[index];\r\n                tempArray[key] = e.value\r\n               \r\n                \r\n            }\r\n        })\r\n\r\n\r\n        this.setState({customerData : tempArray})\r\n\r\n\r\n\r\n        \r\n        \r\n        let options = {\r\n            method : \"POST\",\r\n            headers : {\r\n                \"Content-type\" : \"Application/json\"\r\n            },\r\n            body : JSON.stringify(tempArray)\r\n        }\r\n\r\n        fetch(`http://localhost:4444/update/${customer.id}`,options).then(resp=>resp.json()).then(resp=>console.log(resp))\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        const { updateScreenState, isUpdate, customer } = this.props\r\n        const { customerData } = this.state\r\n\r\n        return (\r\n\r\n\r\n\r\n\r\n            <div\r\n                className='mainContainer'\r\n                hidden={isUpdate}\r\n            >\r\n                <span className='material-symbols-outlined icon'\r\n                    onClick={() => {\r\n                        updateScreenState(!isUpdate)\r\n                    }}\r\n                >close</span>\r\n                <div className='updateContainer'>\r\n                    <div className='customerData'>\r\n                        {Object.keys(customerData).map((e, index) => (\r\n                            <p\r\n                                style={{ fontWeight: 700 }}\r\n                                key={index}\r\n                            >{e.charAt(0).toUpperCase() + e.slice(1).toLowerCase() + \" : \"}<span style={{ fontWeight: 500 }}>{Object.values(customer)[index]}</span></p>\r\n                        ))}\r\n                    </div>\r\n\r\n\r\n                    <div className='updateInput'>\r\n                        {Object.values(customerData).map((e, index) => (\r\n                            <input\r\n                                key={index}\r\n                                className={index > 0 ? 'updateBoxes' : \"Id\"}\r\n                                style={{ outline: \"none\" }}\r\n                                placeholder={e}\r\n                            ></input>\r\n                        ))}\r\n\r\n                        <Button\r\n                            color={\"dark\"}\r\n                            onClick={()=>console.log(customerData)}\r\n                        ><span className='material-symbols-outlined'>edit</span></Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}