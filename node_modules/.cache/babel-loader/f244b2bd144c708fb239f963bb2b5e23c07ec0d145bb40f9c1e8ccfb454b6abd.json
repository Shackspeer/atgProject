{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Libertas\\\\Desktop\\\\ATG_Project-deneme2\\\\project\\\\website\\\\src\\\\components\\\\upload.js\";\nimport React, { Component } from \"react\";\nimport { FormGroup, Input, Table } from \"reactstrap\";\nimport * as XLSX from 'xlsx';\nimport './css/upload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Upload extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      xlsxData: [],\n      fileName: ''\n    };\n    this.handleFile = event => {\n      const file = event.target.files[0];\n      if (file.name.includes(\".xlsx\")) this.convertExcelToJson(file);else {\n        alert(\"Sadece xlsx uzantılı dosyalar listelenir\");\n      }\n    };\n    this.clearInput = () => {\n      document.querySelector(\".fileInput\").value = \"\";\n      this.setState({\n        xlsxData: []\n      });\n    };\n    this.pushDataToTable = data => {\n      const {\n        paths,\n        url\n      } = this.props;\n      const fetchUrl = url + paths.insert;\n      data.forEach(e => {\n        let body = {\n          LanguageCode: e.LanguageCode,\n          PageName: e.PageName,\n          ResourceCode: e.ResourceCode,\n          Resource: e.Resource\n        };\n        let options = {\n          method: 'POST',\n          headers: {\n            \"Content-type\": \"Application/json\"\n          },\n          body: JSON.stringify(body)\n        };\n        fetch();\n      });\n    };\n    this.convertExcelToJson = file => {\n      try {\n        const reader = new FileReader();\n        reader.onload = event => {\n          let data = event.target.result;\n          let workbook = XLSX.read(data, {\n            type: 'binary'\n          });\n          let tempData = [];\n          workbook.SheetNames.forEach(entry => {\n            let worksheet = workbook.Sheets[entry];\n            let xlsxData = XLSX.utils.sheet_to_json(worksheet, {\n              raw: false\n            });\n            tempData.push(xlsxData);\n            console.log(xlsxData);\n          });\n          this.setState({\n            xlsxData: tempData[0]\n          });\n        };\n        reader.readAsBinaryString(file);\n      } catch (err) {\n        alert(\"Yüklenen dosya xlsx olmalı\");\n      }\n    };\n  }\n  render() {\n    const {\n      fileName,\n      xlsxData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uploadMain\",\n      hidden: this.props.isUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined close\",\n        onClick: () => {\n          this.props.setUploadState(!this.props.isUpload);\n          this.clearInput();\n        },\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploadContainer\",\n        children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            className: \"fileInput\",\n            type: \"file\",\n            id: \"fileInput\",\n            onChange: this.handleFile,\n            accept: \".xlsx\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), xlsxData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"previewTable\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: Object.keys(xlsxData[0]).map((e, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"xlsxTableHeaders\",\n                  children: e\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: Object.values(xlsxData).map((e, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                style: {\n                  height: 100,\n                  wordBreak: \"break-all\"\n                },\n                children: Object.values(e).map((j, key) => /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: j\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 80\n                }, this))\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","FormGroup","Input","Table","XLSX","jsxDEV","_jsxDEV","Upload","constructor","args","state","xlsxData","fileName","handleFile","event","file","target","files","name","includes","convertExcelToJson","alert","clearInput","document","querySelector","value","setState","pushDataToTable","data","paths","url","props","fetchUrl","insert","forEach","e","body","LanguageCode","PageName","ResourceCode","Resource","options","method","headers","JSON","stringify","fetch","reader","FileReader","onload","result","workbook","read","type","tempData","SheetNames","entry","worksheet","Sheets","utils","sheet_to_json","raw","push","console","log","readAsBinaryString","err","render","className","hidden","isUpload","children","onClick","setUploadState","_jsxFileName","lineNumber","columnNumber","id","onChange","accept","length","Object","keys","map","index","values","style","height","wordBreak","j","key"],"sources":["C:/Users/Libertas/Desktop/ATG_Project-deneme2/project/website/src/components/upload.js"],"sourcesContent":["\r\nimport React, { Component } from \"react\";\r\nimport { FormGroup, Input, Table } from \"reactstrap\";\r\nimport * as XLSX from 'xlsx';\r\nimport './css/upload.css';\r\n\r\nexport default class Upload extends Component {\r\n    state = {\r\n        xlsxData: [],\r\n        fileName: ''\r\n    };\r\n\r\n    handleFile = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file.name.includes(\".xlsx\"))\r\n            this.convertExcelToJson(file);\r\n        else {\r\n            alert(\"Sadece xlsx uzantılı dosyalar listelenir\")\r\n        }\r\n    };\r\n\r\n\r\n\r\n    clearInput = () => {\r\n        document.querySelector(\".fileInput\").value = \"\"\r\n        this.setState({ xlsxData: [] })\r\n    }\r\n\r\n\r\n    pushDataToTable = data =>{\r\n        const { paths , url } = this.props\r\n        const fetchUrl = url + paths.insert\r\n        data.forEach((e)=>{\r\n            let body = {\r\n                LanguageCode : e.LanguageCode,\r\n                PageName : e.PageName,\r\n                ResourceCode : e.ResourceCode,\r\n                Resource : e.Resource\r\n            }\r\n\r\n\r\n            let options = {\r\n                method : 'POST',\r\n                headers : {\r\n                    \"Content-type\" : \"Application/json\"\r\n                },\r\n                body : JSON.stringify(body)\r\n            }\r\n\r\n\r\n\r\n\r\n            fetch()\r\n        })\r\n    }\r\n\r\n    convertExcelToJson = (file) => {\r\n\r\n\r\n        try {\r\n            const reader = new FileReader();\r\n\r\n\r\n            reader.onload = (event) => {\r\n                let data = event.target.result;\r\n                let workbook = XLSX.read(data, { type: 'binary' });\r\n                let tempData = [];\r\n                workbook.SheetNames.forEach((entry) => {\r\n                    let worksheet = workbook.Sheets[entry];\r\n                    let xlsxData = XLSX.utils.sheet_to_json(worksheet, { raw: false });\r\n                    tempData.push(xlsxData);\r\n                    console.log(xlsxData);\r\n                });\r\n                this.setState({ xlsxData: tempData[0] });\r\n            };\r\n            reader.readAsBinaryString(file);\r\n        }\r\n        catch (err) {\r\n            alert(\"Yüklenen dosya xlsx olmalı\")\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { fileName, xlsxData } = this.state;\r\n\r\n        return (\r\n            <div className=\"uploadMain\" hidden={this.props.isUpload}>\r\n                <span\r\n                    className=\"material-symbols-outlined close\"\r\n                    onClick={() => { this.props.setUploadState(!this.props.isUpload); this.clearInput() }}\r\n                >\r\n                    close\r\n                </span>\r\n                <div className=\"uploadContainer\">\r\n                    <FormGroup>\r\n                        <Input\r\n                            className=\"fileInput\"\r\n                            type=\"file\"\r\n                            id=\"fileInput\"\r\n                            onChange={this.handleFile}\r\n                            accept=\".xlsx\"\r\n                        />\r\n                    </FormGroup>\r\n                    {xlsxData.length > 0 && (\r\n                        <div className=\"previewTable\">\r\n                            <Table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        {Object.keys(xlsxData[0]).map((e, index) => (\r\n                                            <th key={index} className=\"xlsxTableHeaders\">{e}</th>\r\n                                        ))}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {Object.values(xlsxData).map((e, index) => (\r\n                                        <tr key={index} style={{height:100,wordBreak:\"break-all\"}}>\r\n                                            {Object.values(e).map((j, key) => (<td key={key}>{j}</td>))}\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}