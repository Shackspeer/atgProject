{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Libertas\\\\Desktop\\\\ATG_Project-deneme2\\\\project\\\\website\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Table, Button } from 'reactstrap';\nimport './App.css';\nimport ListMethods from './components/listMethods';\nimport Searcher from './components/searcher';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      customers: [],\n      isUpdate: true,\n      selectedUser: []\n    };\n    this.searchCustomers = input => {\n      const {\n        customers\n      } = this.state.customers;\n      const unHandledCustomers = [...customers];\n      const sortedCustomers = unHandledCustomers.filter(a => a.name.match(input));\n    };\n    this.updateIsSetUpdate = newState => {\n      this.setState({\n        isUpdate: newState\n      });\n    };\n    this.sortCustomersBySalary = sortParameter => {\n      const {\n        customers\n      } = this.state;\n      const sortedCustomers = [...customers];\n      switch (sortParameter) {\n        case 1:\n          {\n            sortedCustomers.sort((a, b) => a.id - b.id);\n            this.setState({\n              customers: sortedCustomers\n            });\n            break;\n          }\n        case 2:\n          {\n            sortedCustomers.sort((a, b) => {\n              if (a.name < b.name) return -1;\n              if (a.name > b.name) return 1;\n              return 0;\n            });\n            this.setState({\n              customers: sortedCustomers\n            });\n            break;\n          }\n        case 3:\n          {\n            sortedCustomers.sort((a, b) => {\n              if (a.country < b.country) return -1;\n              if (a.country > b.country) return 1;\n              return 0;\n            });\n            this.setState({\n              customers: sortedCustomers\n            });\n            break;\n          }\n        case 4:\n          {\n            sortedCustomers.sort((a, b) => a.salary - b.salary);\n            this.setState({\n              customers: sortedCustomers\n            });\n            break;\n          }\n        default:\n          {\n            break;\n          }\n      }\n    };\n    this.updateCustomer = async () => {\n      const {\n        selectedUser\n      } = this.state;\n      const body = {\n        name: selectedUser.name,\n        country: selectedUser.country,\n        salary: selectedUser.salary,\n        profession: selectedUser.profession\n      };\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"Application/json\"\n        },\n        body: JSON.stringify(body)\n      };\n      await fetch(`http://localhost:4444/update/${selectedUser.id}`, options).then(resp => resp.json());\n    };\n    this.getCustomers = async () => {\n      await fetch(\"http://localhost:4444/customers\").then(resp => resp.json()).then(resp => this.setState({\n        customers: resp\n      }));\n    };\n    this.setCurrentListMethod = method => {\n      this.setState({\n        currentMethod: method\n      });\n    };\n    this.setUpdateState = () => {\n      this.setState({\n        isUpdate: !this.state.isUpdate\n      });\n    };\n  }\n  componentDidMount() {\n    this.getCustomers();\n  }\n  render() {\n    const {\n      customers,\n      isUpdate,\n      selectedUser\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: customers.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          className: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.keys(customers[0]).map((e, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: e\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: customers.map((e, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: e.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: e.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: e.country\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: e.salary\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: e.profession\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  color: \"success\",\n                  style: {\n                    width: 100\n                  },\n                  onClick: () => {\n                    this.setUpdateState();\n                    console.log(isUpdate);\n                    this.setState({\n                      selectedUser: e\n                    });\n                  },\n                  children: \"update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 21\n              }, this)]\n            }, e.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListMethods, {\n          setCurrentListMethod: this.setCurrentListMethod,\n          sortCustomers: this.sortCustomersBySalary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Searcher, {\n          customers: customers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Table","Button","ListMethods","Searcher","jsxDEV","_jsxDEV","App","constructor","args","state","customers","isUpdate","selectedUser","searchCustomers","input","unHandledCustomers","sortedCustomers","filter","a","name","match","updateIsSetUpdate","newState","setState","sortCustomersBySalary","sortParameter","sort","b","id","country","salary","updateCustomer","body","profession","options","method","headers","JSON","stringify","fetch","then","resp","json","getCustomers","setCurrentListMethod","currentMethod","setUpdateState","componentDidMount","render","children","length","className","Object","keys","map","e","index","fileName","_jsxFileName","lineNumber","columnNumber","color","style","width","onClick","console","log","sortCustomers"],"sources":["C:/Users/Libertas/Desktop/ATG_Project-deneme2/project/website/src/App.js"],"sourcesContent":["import React, { Component} from 'react';\nimport {Table,Button} from 'reactstrap';\nimport './App.css';\n\nimport ListMethods from './components/listMethods';\nimport Searcher from './components/searcher'\n\n\nexport default class App extends Component {\n\n\n  state = {\n    customers : [],\n    isUpdate : true,\n    selectedUser : []\n  }\n\n\n\n  searchCustomers = (input) =>{\n    const { customers }= this.state.customers\n\n\n\n    const unHandledCustomers = [...customers];\n\n\n    const sortedCustomers = unHandledCustomers.filter((a)=>a.name.match(input))\n  }\n\n\n  updateIsSetUpdate = (newState) => {\n    this.setState({ isUpdate: newState });\n  };\n\n\n  sortCustomersBySalary = (sortParameter) =>{\n    const { customers } = this.state;\n    const sortedCustomers = [...customers]\n    switch (sortParameter) {\n      case 1 : {\n        sortedCustomers.sort((a,b)=>a.id-b.id)\n        this.setState({customers:sortedCustomers})\n        break\n      }\n      case 2 : {\n        sortedCustomers.sort((a, b) => {\n          if (a.name < b.name) return -1;\n          if (a.name > b.name) return 1;\n          return 0;\n        });\n        this.setState({customers:sortedCustomers})\n        break\n\n\n        \n      }\n      case 3 : {\n        sortedCustomers.sort((a, b) => {\n          if (a.country < b.country) return -1;\n          if (a.country > b.country) return 1;\n          return 0;\n        });\n        this.setState({customers:sortedCustomers})\n        break\n      }\n      case 4 :{\n        sortedCustomers.sort((a,b)=>a.salary-b.salary)\n        this.setState({customers:sortedCustomers})\n        break\n      }\n      default : {\n        break\n      }\n    }\n  }\n\n  updateCustomer= async () =>{\n    const { selectedUser } = this.state\n\n\n    const body =  {\n      name : selectedUser.name,\n      country : selectedUser.country,\n      salary : selectedUser.salary,\n      profession : selectedUser.profession \n    }\n\n    const options = {\n      method : \"POST\",\n      headers : {\n        \"Content-type\" : \"Application/json\"\n      },\n      body : JSON.stringify(body)\n    }\n\n   await fetch(`http://localhost:4444/update/${selectedUser.id}`,options)\n   .then(resp=>resp.json())\n\n\n  }\n  getCustomers = async () =>{\n    await fetch(\"http://localhost:4444/customers\").then(resp=>resp.json()).then(resp=>this.setState({customers : resp}))\n  }\n\n\n  componentDidMount(){\n    this.getCustomers()\n  }\n\n  setCurrentListMethod = method =>{\n      this.setState({currentMethod : method});\n  }\n\n  setUpdateState = () =>{\n    this.setState({ isUpdate: !this.state.isUpdate })\n  }\n  \n\n  render() {\n    const {customers,isUpdate,selectedUser} = this.state\n\n    return (\n      <div>\n        {customers.length > 0 && (\n          <div >\n            <Table className='table'>\n              <thead>\n                <tr>\n                  {Object.keys(customers[0]).map((e,index)=>(\n                    <th key={index}>\n                      {e}\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {customers.map((e,index)=>(\n                  <tr key={e.id}>\n                    <td>{e.id}</td>\n                    <td>{e.name}</td>\n                    <td>{e.country}</td>\n                    <td>{e.salary}</td>\n                    <td>{e.profession}</td>\n                    <td>\n                      <Button\n                        color='success'\n                        style={{width:100}}\n                        onClick={()=>{this.setUpdateState();console.log(isUpdate);this.setState({selectedUser : e})}}\n                      >update</Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n            <ListMethods\n              setCurrentListMethod={this.setCurrentListMethod}\n              sortCustomers={this.sortCustomersBySalary}\n            ></ListMethods>\n            <Searcher customers={customers}></Searcher>\n           \n\n\n          </div>\n          \n          \n        )}\n       \n      </div>\n    )\n  }\n}\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAO,OAAO;AACvC,SAAQC,KAAK,EAACC,MAAM,QAAO,YAAY;AACvC,OAAO,WAAW;AAElB,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,QAAQ,MAAM,uBAAuB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG5C,eAAe,MAAMC,GAAG,SAASP,SAAS,CAAC;EAAAQ,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAGzCC,KAAK,GAAG;MACNC,SAAS,EAAG,EAAE;MACdC,QAAQ,EAAG,IAAI;MACfC,YAAY,EAAG;IACjB,CAAC;IAAA,KAIDC,eAAe,GAAIC,KAAK,IAAI;MAC1B,MAAM;QAAEJ;MAAU,CAAC,GAAE,IAAI,CAACD,KAAK,CAACC,SAAS;MAIzC,MAAMK,kBAAkB,GAAG,CAAC,GAAGL,SAAS,CAAC;MAGzC,MAAMM,eAAe,GAAGD,kBAAkB,CAACE,MAAM,CAAEC,CAAC,IAAGA,CAAC,CAACC,IAAI,CAACC,KAAK,CAACN,KAAK,CAAC,CAAC;IAC7E,CAAC;IAAA,KAGDO,iBAAiB,GAAIC,QAAQ,IAAK;MAChC,IAAI,CAACC,QAAQ,CAAC;QAAEZ,QAAQ,EAAEW;MAAS,CAAC,CAAC;IACvC,CAAC;IAAA,KAGDE,qBAAqB,GAAIC,aAAa,IAAI;MACxC,MAAM;QAAEf;MAAU,CAAC,GAAG,IAAI,CAACD,KAAK;MAChC,MAAMO,eAAe,GAAG,CAAC,GAAGN,SAAS,CAAC;MACtC,QAAQe,aAAa;QACnB,KAAK,CAAC;UAAG;YACPT,eAAe,CAACU,IAAI,CAAC,CAACR,CAAC,EAACS,CAAC,KAAGT,CAAC,CAACU,EAAE,GAACD,CAAC,CAACC,EAAE,CAAC;YACtC,IAAI,CAACL,QAAQ,CAAC;cAACb,SAAS,EAACM;YAAe,CAAC,CAAC;YAC1C;UACF;QACA,KAAK,CAAC;UAAG;YACPA,eAAe,CAACU,IAAI,CAAC,CAACR,CAAC,EAAES,CAAC,KAAK;cAC7B,IAAIT,CAAC,CAACC,IAAI,GAAGQ,CAAC,CAACR,IAAI,EAAE,OAAO,CAAC,CAAC;cAC9B,IAAID,CAAC,CAACC,IAAI,GAAGQ,CAAC,CAACR,IAAI,EAAE,OAAO,CAAC;cAC7B,OAAO,CAAC;YACV,CAAC,CAAC;YACF,IAAI,CAACI,QAAQ,CAAC;cAACb,SAAS,EAACM;YAAe,CAAC,CAAC;YAC1C;UAIF;QACA,KAAK,CAAC;UAAG;YACPA,eAAe,CAACU,IAAI,CAAC,CAACR,CAAC,EAAES,CAAC,KAAK;cAC7B,IAAIT,CAAC,CAACW,OAAO,GAAGF,CAAC,CAACE,OAAO,EAAE,OAAO,CAAC,CAAC;cACpC,IAAIX,CAAC,CAACW,OAAO,GAAGF,CAAC,CAACE,OAAO,EAAE,OAAO,CAAC;cACnC,OAAO,CAAC;YACV,CAAC,CAAC;YACF,IAAI,CAACN,QAAQ,CAAC;cAACb,SAAS,EAACM;YAAe,CAAC,CAAC;YAC1C;UACF;QACA,KAAK,CAAC;UAAE;YACNA,eAAe,CAACU,IAAI,CAAC,CAACR,CAAC,EAACS,CAAC,KAAGT,CAAC,CAACY,MAAM,GAACH,CAAC,CAACG,MAAM,CAAC;YAC9C,IAAI,CAACP,QAAQ,CAAC;cAACb,SAAS,EAACM;YAAe,CAAC,CAAC;YAC1C;UACF;QACA;UAAU;YACR;UACF;MACF;IACF,CAAC;IAAA,KAEDe,cAAc,GAAE,YAAW;MACzB,MAAM;QAAEnB;MAAa,CAAC,GAAG,IAAI,CAACH,KAAK;MAGnC,MAAMuB,IAAI,GAAI;QACZb,IAAI,EAAGP,YAAY,CAACO,IAAI;QACxBU,OAAO,EAAGjB,YAAY,CAACiB,OAAO;QAC9BC,MAAM,EAAGlB,YAAY,CAACkB,MAAM;QAC5BG,UAAU,EAAGrB,YAAY,CAACqB;MAC5B,CAAC;MAED,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAG,MAAM;QACfC,OAAO,EAAG;UACR,cAAc,EAAG;QACnB,CAAC;QACDJ,IAAI,EAAGK,IAAI,CAACC,SAAS,CAACN,IAAI;MAC5B,CAAC;MAEF,MAAMO,KAAK,CAAE,gCAA+B3B,YAAY,CAACgB,EAAG,EAAC,EAACM,OAAO,CAAC,CACrEM,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;IAGzB,CAAC;IAAA,KACDC,YAAY,GAAG,YAAW;MACxB,MAAMJ,KAAK,CAAC,iCAAiC,CAAC,CAACC,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,CAACC,IAAI,IAAE,IAAI,CAAClB,QAAQ,CAAC;QAACb,SAAS,EAAG+B;MAAI,CAAC,CAAC,CAAC;IACtH,CAAC;IAAA,KAODG,oBAAoB,GAAGT,MAAM,IAAG;MAC5B,IAAI,CAACZ,QAAQ,CAAC;QAACsB,aAAa,EAAGV;MAAM,CAAC,CAAC;IAC3C,CAAC;IAAA,KAEDW,cAAc,GAAG,MAAK;MACpB,IAAI,CAACvB,QAAQ,CAAC;QAAEZ,QAAQ,EAAE,CAAC,IAAI,CAACF,KAAK,CAACE;MAAS,CAAC,CAAC;IACnD,CAAC;EAAA;EAVDoC,iBAAiBA,CAAA,EAAE;IACjB,IAAI,CAACJ,YAAY,CAAC,CAAC;EACrB;EAWAK,MAAMA,CAAA,EAAG;IACP,MAAM;MAACtC,SAAS;MAACC,QAAQ;MAACC;IAAY,CAAC,GAAG,IAAI,CAACH,KAAK;IAEpD,oBACEJ,OAAA;MAAA4C,QAAA,EACGvC,SAAS,CAACwC,MAAM,GAAG,CAAC,iBACnB7C,OAAA;QAAA4C,QAAA,gBACE5C,OAAA,CAACL,KAAK;UAACmD,SAAS,EAAC,OAAO;UAAAF,QAAA,gBACtB5C,OAAA;YAAA4C,QAAA,eACE5C,OAAA;cAAA4C,QAAA,EACGG,MAAM,CAACC,IAAI,CAAC3C,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC4C,GAAG,CAAC,CAACC,CAAC,EAACC,KAAK,kBACrCnD,OAAA;gBAAA4C,QAAA,EACGM;cAAC,GADKC,KAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEV,CACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACRvD,OAAA;YAAA4C,QAAA,EACGvC,SAAS,CAAC4C,GAAG,CAAC,CAACC,CAAC,EAACC,KAAK,kBACrBnD,OAAA;cAAA4C,QAAA,gBACE5C,OAAA;gBAAA4C,QAAA,EAAKM,CAAC,CAAC3B;cAAE;gBAAA6B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACfvD,OAAA;gBAAA4C,QAAA,EAAKM,CAAC,CAACpC;cAAI;gBAAAsC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACjBvD,OAAA;gBAAA4C,QAAA,EAAKM,CAAC,CAAC1B;cAAO;gBAAA4B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACpBvD,OAAA;gBAAA4C,QAAA,EAAKM,CAAC,CAACzB;cAAM;gBAAA2B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnBvD,OAAA;gBAAA4C,QAAA,EAAKM,CAAC,CAACtB;cAAU;gBAAAwB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACvBvD,OAAA;gBAAA4C,QAAA,eACE5C,OAAA,CAACJ,MAAM;kBACL4D,KAAK,EAAC,SAAS;kBACfC,KAAK,EAAE;oBAACC,KAAK,EAAC;kBAAG,CAAE;kBACnBC,OAAO,EAAEA,CAAA,KAAI;oBAAC,IAAI,CAAClB,cAAc,CAAC,CAAC;oBAACmB,OAAO,CAACC,GAAG,CAACvD,QAAQ,CAAC;oBAAC,IAAI,CAACY,QAAQ,CAAC;sBAACX,YAAY,EAAG2C;oBAAC,CAAC,CAAC;kBAAA,CAAE;kBAAAN,QAAA,EAC9F;gBAAM;kBAAAQ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACd,CAAC;YAAA,GAZEL,CAAC,CAAC3B,EAAE;cAAA6B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAaT,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACRvD,OAAA,CAACH,WAAW;UACV0C,oBAAoB,EAAE,IAAI,CAACA,oBAAqB;UAChDuB,aAAa,EAAE,IAAI,CAAC3C;QAAsB;UAAAiC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC,eACfvD,OAAA,CAACF,QAAQ;UAACO,SAAS,EAAEA;QAAU;UAAA+C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIxC;IAGN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEE,CAAC;EAEV;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}