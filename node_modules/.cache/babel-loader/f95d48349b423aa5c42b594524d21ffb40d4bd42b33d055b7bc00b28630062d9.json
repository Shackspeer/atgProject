{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Libertas\\\\Desktop\\\\ATG_Project-deneme2\\\\project\\\\website\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Table, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport './App.css';\nimport Update from './components/updateScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      customers: [],\n      isActive: false,\n      listMethods: [\"List by id\", \"List by salary\", \"List by country\"],\n      currentMethod: \"0\",\n      isUpdate: true,\n      selectedUser: []\n    };\n    this.updateIsSetUpdate = newState => {\n      this.setState({\n        isUpdate: newState\n      });\n    };\n    this.sortCustomersBySalary = sortParameter => {\n      const {\n        customers\n      } = this.state;\n      const sortedCustomers = [...customers];\n      switch (sortParameter) {\n        case 1:\n          {\n            sortedCustomers.sort((a, b) => a.id - b.id);\n            this.setState({\n              customers: sortedCustomers\n            });\n            break;\n          }\n        case 2:\n          {\n            sortedCustomers.sort((a, b) => a.salary - b.salary);\n            this.setState({\n              customers: sortedCustomers\n            });\n            break;\n          }\n        case 3:\n          {\n            sortedCustomers.sort((a, b) => {\n              if (a < b) return -1;\n              if (a > b) return 1;\n              return 0;\n            });\n          }\n        default:\n          {\n            break;\n          }\n      }\n    };\n    this.updateCustomer = async () => {\n      const {\n        selectedUser\n      } = this.state;\n      const body = {\n        name: selectedUser.name,\n        country: selectedUser.country,\n        salary: selectedUser.salary,\n        profession: selectedUser.profession\n      };\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"Application/json\"\n        },\n        body: JSON.stringify(body)\n      };\n      await fetch(`http://localhost:4444/update/${selectedUser.id}`, options).then(resp => resp.json());\n    };\n    this.getCustomers = async () => {\n      await fetch(\"http://localhost:4444/customers\").then(resp => resp.json()).then(resp => this.setState({\n        customers: resp\n      }));\n    };\n    this.setCurrentListMethod = method => {\n      this.setState({\n        currentMethod: method\n      });\n    };\n    this.setUpdateState = () => {\n      this.setState({\n        isUpdate: !this.state.isUpdate\n      });\n    };\n  }\n  componentDidMount() {\n    this.getCustomers();\n  }\n  render() {\n    const {\n      customers,\n      listMethods,\n      isUpdate,\n      selectedUser\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: customers.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          className: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.keys(customers[0]).map((e, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: e\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: customers.map((e, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: e.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: e.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: e.country\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: e.salary\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: e.profession\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  color: \"success\",\n                  style: {\n                    width: 100\n                  },\n                  onClick: () => {\n                    this.setUpdateState();\n                    console.log(isUpdate);\n                    this.setState({\n                      selectedUser: e\n                    });\n                  },\n                  children: \"update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 21\n              }, this)]\n            }, e.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n          className: \"listBar\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: {\n              textAlign: \"center\",\n              padding: 25\n            },\n            children: \"List Methods\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), listMethods.map((e, index) => /*#__PURE__*/_jsxDEV(ListGroupItem, {\n            tag: \"a\",\n            className: \"listSection\",\n            onClick: () => {\n              this.setCurrentListMethod(index);\n              this.sortCustomersBySalary(index + 1);\n            },\n            active: this.state.currentMethod === index ? true : false,\n            children: e\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Table","ListGroup","ListGroupItem","Button","Update","jsxDEV","_jsxDEV","App","constructor","args","state","customers","isActive","listMethods","currentMethod","isUpdate","selectedUser","updateIsSetUpdate","newState","setState","sortCustomersBySalary","sortParameter","sortedCustomers","sort","a","b","id","salary","updateCustomer","body","name","country","profession","options","method","headers","JSON","stringify","fetch","then","resp","json","getCustomers","setCurrentListMethod","setUpdateState","componentDidMount","render","children","length","className","Object","keys","map","e","index","fileName","_jsxFileName","lineNumber","columnNumber","color","style","width","onClick","console","log","textAlign","padding","tag","active"],"sources":["C:/Users/Libertas/Desktop/ATG_Project-deneme2/project/website/src/App.js"],"sourcesContent":["import React, { Component} from 'react';\nimport {Table,ListGroup,ListGroupItem,Button} from 'reactstrap';\nimport './App.css';\nimport Update from './components/updateScreen'\n\n\nexport default class App extends Component {\n\n\n  state = {\n    customers : [],\n    isActive : false,\n    listMethods : [\"List by id\",\"List by salary\",\"List by country\"],\n    currentMethod : \"0\",\n    isUpdate : true,\n    selectedUser : []\n  }\n\n  updateIsSetUpdate = (newState) => {\n    this.setState({ isUpdate: newState });\n  };\n\n\n  sortCustomersBySalary = (sortParameter) =>{\n    const { customers } = this.state;\n    const sortedCustomers = [...customers]\n    switch (sortParameter) {\n      case 1 : {\n        sortedCustomers.sort((a,b)=>a.id-b.id)\n        this.setState({customers:sortedCustomers})\n        break\n      }\n      case 2 : {\n        sortedCustomers.sort((a,b)=>a.salary-b.salary)\n        this.setState({customers:sortedCustomers})\n        break\n      }\n      case 3 : {\n        sortedCustomers.sort((a, b) => {\n          if (a < b) return -1;\n          if (a > b) return 1;\n          return 0;\n        });\n      }\n      default : {\n        break\n      }\n    }\n  }\n\n  updateCustomer= async () =>{\n    const { selectedUser } = this.state\n\n\n    const body =  {\n      name : selectedUser.name,\n      country : selectedUser.country,\n      salary : selectedUser.salary,\n      profession : selectedUser.profession \n    }\n\n    const options = {\n      method : \"POST\",\n      headers : {\n        \"Content-type\" : \"Application/json\"\n      },\n      body : JSON.stringify(body)\n    }\n\n   await fetch(`http://localhost:4444/update/${selectedUser.id}`,options)\n   .then(resp=>resp.json())\n\n\n  }\n  getCustomers = async () =>{\n    await fetch(\"http://localhost:4444/customers\").then(resp=>resp.json()).then(resp=>this.setState({customers : resp}))\n  }\n\n\n  componentDidMount(){\n    this.getCustomers()\n  }\n\n  setCurrentListMethod = method =>{\n      this.setState({currentMethod : method});\n  }\n\n  setUpdateState = () =>{\n    this.setState({ isUpdate: !this.state.isUpdate })\n  }\n  \n\n  render() {\n    const {customers,listMethods,isUpdate,selectedUser} = this.state\n\n    return (\n      <div>\n        {customers.length > 0 && (\n          <div >\n            <Table className='table'>\n              <thead>\n                <tr>\n                  {Object.keys(customers[0]).map((e,index)=>(\n                    <th key={index}>\n                      {e}\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {customers.map((e,index)=>(\n                  <tr key={e.id}>\n                    <td>{e.id}</td>\n                    <td>{e.name}</td>\n                    <td>{e.country}</td>\n                    <td>{e.salary}</td>\n                    <td>{e.profession}</td>\n                    <td>\n                      <Button\n                        color='success'\n                        style={{width:100}}\n                        onClick={()=>{this.setUpdateState();console.log(isUpdate);this.setState({selectedUser : e})}}\n                      >update</Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n            <ListGroup className='listBar'>\n              <h2 style={{textAlign:\"center\",padding:25}}>List Methods</h2>\n              {listMethods.map((e,index)=>(\n                <ListGroupItem\n                tag=\"a\"\n                className='listSection' \n                key={index} \n                onClick={()=>{this.setCurrentListMethod(index);this.sortCustomersBySalary(index + 1)}} \n                active={this.state.currentMethod === index?true:false} \n                >{e}</ListGroupItem>\n              ))}\n            </ListGroup>\n\n           \n\n\n          </div>\n          \n          \n        )}\n       \n      </div>\n    )\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}