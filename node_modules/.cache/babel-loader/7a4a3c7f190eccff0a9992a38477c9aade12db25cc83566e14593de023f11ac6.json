{"ast":null,"code":"'use strict';\n\nconst axios = require('axios');\nconst {\n  Console\n} = require('console');\nconst constants = require('./constants');\nconst crypto = require('crypto');\nconst randomString = () => crypto.randomBytes(16).toString('hex');\nconst removeEmptyValue = obj => {\n  if (!(obj instanceof Object)) return {};\n  Object.keys(obj).forEach(key => isEmptyValue(obj[key]) && delete obj[key]);\n  return obj;\n};\nconst isEmptyValue = input => {\n  /**\n   * Scope of empty value: falsy value (except for false and 0),\n   * string with white space characters only, empty object, empty array\n   */\n  return !input && input !== false && input !== 0 || (typeof input === 'string' || input instanceof String) && /^\\s+$/.test(input) || input instanceof Object && !Object.keys(input).length || Array.isArray(input) && !input.length;\n};\nconst buildQueryString = params => {\n  if (!params) return '';\n  return Object.entries(params).map(stringifyKeyValuePair).join('&');\n};\n\n/**\n * NOTE: The array conversion logic is different from usual query string.\n * E.g. symbols=[\"BTCUSDT\",\"BNBBTC\"] instead of symbols[]=BTCUSDT&symbols[]=BNBBTC\n */\nconst stringifyKeyValuePair = ([key, value]) => {\n  const valueString = Array.isArray(value) ? `[\"${value.join('\",\"')}\"]` : value;\n  return `${key}=${encodeURIComponent(valueString)}`;\n};\nconst getRequestInstance = config => {\n  return axios.create({\n    ...config\n  });\n};\nconst createRequest = config => {\n  const {\n    baseURL,\n    apiKey,\n    method,\n    url,\n    timeout,\n    proxy,\n    httpsAgent\n  } = config;\n  return getRequestInstance({\n    baseURL,\n    timeout,\n    proxy,\n    httpsAgent,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-MBX-APIKEY': apiKey,\n      'User-Agent': `${constants.appName}/${constants.appVersion}`\n    }\n  }).request({\n    method,\n    url\n  });\n};\nconst flowRight = (...functions) => input => functions.reduceRight((input, fn) => fn(input), input);\nconst defaultLogger = new Console({\n  stdout: process.stdout,\n  stderr: process.stderr\n});\nconst sortObject = obj => Object.keys(obj).sort().reduce((res, key) => {\n  res[key] = obj[key];\n  return res;\n}, {});\nmodule.exports = {\n  isEmptyValue,\n  removeEmptyValue,\n  buildQueryString,\n  createRequest,\n  flowRight,\n  defaultLogger,\n  randomString,\n  sortObject\n};","map":{"version":3,"names":["axios","require","Console","constants","crypto","randomString","randomBytes","toString","removeEmptyValue","obj","Object","keys","forEach","key","isEmptyValue","input","String","test","length","Array","isArray","buildQueryString","params","entries","map","stringifyKeyValuePair","join","value","valueString","encodeURIComponent","getRequestInstance","config","create","createRequest","baseURL","apiKey","method","url","timeout","proxy","httpsAgent","headers","appName","appVersion","request","flowRight","functions","reduceRight","fn","defaultLogger","stdout","process","stderr","sortObject","sort","reduce","res","module","exports"],"sources":["C:/Users/Libertas/node_modules/@binance/connector/src/helpers/utils.js"],"sourcesContent":["'use strict'\n\nconst axios = require('axios')\nconst { Console } = require('console')\nconst constants = require('./constants')\nconst crypto = require('crypto')\n\nconst randomString = () => crypto.randomBytes(16).toString('hex')\n\nconst removeEmptyValue = obj => {\n  if (!(obj instanceof Object)) return {}\n  Object.keys(obj).forEach(key => isEmptyValue(obj[key]) && delete obj[key])\n  return obj\n}\n\nconst isEmptyValue = input => {\n  /**\n   * Scope of empty value: falsy value (except for false and 0),\n   * string with white space characters only, empty object, empty array\n   */\n  return (!input && input !== false && input !== 0) ||\n    ((typeof input === 'string' || input instanceof String) && /^\\s+$/.test(input)) ||\n    (input instanceof Object && !Object.keys(input).length) ||\n    (Array.isArray(input) && !input.length)\n}\n\nconst buildQueryString = params => {\n  if (!params) return ''\n  return Object.entries(params)\n    .map(stringifyKeyValuePair)\n    .join('&')\n}\n\n/**\n * NOTE: The array conversion logic is different from usual query string.\n * E.g. symbols=[\"BTCUSDT\",\"BNBBTC\"] instead of symbols[]=BTCUSDT&symbols[]=BNBBTC\n */\nconst stringifyKeyValuePair = ([key, value]) => {\n  const valueString = Array.isArray(value) ? `[\"${value.join('\",\"')}\"]` : value\n  return `${key}=${encodeURIComponent(valueString)}`\n}\n\nconst getRequestInstance = (config) => {\n  return axios.create({\n    ...config\n  })\n}\n\nconst createRequest = (config) => {\n  const { baseURL, apiKey, method, url, timeout, proxy, httpsAgent } = config\n  return getRequestInstance({\n    baseURL,\n    timeout,\n    proxy,\n    httpsAgent,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-MBX-APIKEY': apiKey,\n      'User-Agent': `${constants.appName}/${constants.appVersion}`\n    }\n  }).request({\n    method,\n    url\n  })\n}\n\nconst flowRight = (...functions) => input => functions.reduceRight(\n  (input, fn) => fn(input),\n  input\n)\n\nconst defaultLogger = new Console({\n  stdout: process.stdout,\n  stderr: process.stderr\n})\n\nconst sortObject = obj => Object.keys(obj).sort().reduce((res, key) => {\n  res[key] = obj[key]\n  return res\n}, {})\n\nmodule.exports = {\n  isEmptyValue,\n  removeEmptyValue,\n  buildQueryString,\n  createRequest,\n  flowRight,\n  defaultLogger,\n  randomString,\n  sortObject\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}