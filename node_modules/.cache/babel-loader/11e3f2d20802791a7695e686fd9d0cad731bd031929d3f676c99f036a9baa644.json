{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Libertas\\\\Desktop\\\\ATG_Project-deneme2\\\\project\\\\website\\\\src\\\\components\\\\update.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport './css/update.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class update extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      updateState: this.props.isUpdate,\n      logData: {},\n      inserted: false\n    };\n    this.updateTexts = () => {\n      const elements = document.querySelectorAll(\".data\");\n      const inputs = document.querySelectorAll(\".updateBoxes\");\n      let data = [];\n      inputs.forEach(e => data.push(e.value));\n      elements.forEach((e, index) => {\n        console.log(data[index]);\n        e.innerText = data[index] !== \"\" ? data[index] : Object.values(this.props.log)[index + 1];\n      });\n    };\n    this.updateUser = async () => {\n      const {\n        url,\n        paths\n      } = this.props;\n      const elements = document.querySelectorAll(\".updateBoxes\");\n      const {\n        log\n      } = this.props;\n      const {\n        logData\n      } = this.state;\n      console.log(log);\n      let tempArray = {\n        LanguageCode: log.LanguageCode,\n        PageName: log.PageName,\n        ResourceCode: log.ResourceCode,\n        Resource: log.Resource\n      };\n      elements.forEach((e, index) => {\n        if (e.value.trim() !== \"\") {\n          let key = Object.keys(tempArray)[index];\n          tempArray[key] = e.value;\n        }\n      });\n      this.setState({\n        inserted: !this.state.inserted\n      });\n      let options = {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"Application/json\"\n        },\n        body: JSON.stringify(tempArray)\n      };\n      let fetchUrl = url + paths.update + log.Id;\n      await fetch(fetchUrl, options).then(resp => resp.json()).then(resp => console.log(resp));\n      this.updateTexts();\n      this.props.getLogs();\n    };\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", event => {\n      if (!this.props.isUpdate) {\n        if (event.key === \"Escape\") this.props.updateScreenState();\n      }\n    });\n  }\n  render() {\n    const {\n      updateScreenState,\n      isUpdate,\n      log\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"updateMainContainer\",\n      hidden: isUpdate,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined icon\",\n        onClick: () => {\n          updateScreenState(!isUpdate);\n        },\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"updateContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logData\",\n          children: Object.keys(log).map((e, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontWeight: 700\n            },\n            children: [e.charAt(0).toUpperCase() + e.slice(1).toLowerCase() + \" : \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: index > 0 ? \"data\" : \"id\",\n              style: {\n                fontWeight: 500\n              },\n              children: Object.values(log)[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 92\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"updateInput\",\n          children: [Object.values(log).map((e, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            className: index > 0 ? 'updateBoxes' : \"Id\",\n            style: {\n              outline: \"none\"\n            },\n            placeholder: e\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"updateButton\",\n            color: \"dark\",\n            onClick: () => {\n              this.updateUser();\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined\",\n              children: \"edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 26\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Button","jsxDEV","_jsxDEV","update","constructor","args","state","updateState","props","isUpdate","logData","inserted","updateTexts","elements","document","querySelectorAll","inputs","data","forEach","e","push","value","index","console","log","innerText","Object","values","updateUser","url","paths","tempArray","LanguageCode","PageName","ResourceCode","Resource","trim","key","keys","setState","options","method","headers","body","JSON","stringify","fetchUrl","Id","fetch","then","resp","json","getLogs","componentDidMount","addEventListener","event","updateScreenState","render","className","hidden","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","style","fontWeight","charAt","toUpperCase","slice","toLowerCase","outline","placeholder","color"],"sources":["C:/Users/Libertas/Desktop/ATG_Project-deneme2/project/website/src/components/update.js"],"sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport { Button } from 'reactstrap'\r\nimport './css/update.css'\r\nexport default class update extends Component {\r\n    \r\n\r\n    state = {\r\n        updateState: this.props.isUpdate,\r\n        logData : {},\r\n        inserted : false,\r\n        \r\n    }\r\n\r\n    \r\n\r\n    componentDidMount() {\r\n        \r\n\r\n\r\n        document.addEventListener(\"keydown\", (event) => {\r\n            if (!this.props.isUpdate) {\r\n                if (event.key === \"Escape\") this.props.updateScreenState()\r\n            }\r\n        })\r\n    }\r\n\r\n    \r\n    updateTexts = () =>{\r\n        \r\n\r\n\r\n        const elements = document.querySelectorAll(\".data\")\r\n        const inputs = document.querySelectorAll(\".updateBoxes\")\r\n\r\n        let data = [];\r\n\r\n\r\n        inputs.forEach(e=>data.push(e.value))\r\n\r\n        \r\n        elements.forEach((e,index)=>{\r\n            console.log(data[index])\r\n            e.innerText =  data[index] !== \"\" ? data[index] : Object.values(this.props.log)[index + 1]\r\n        })\r\n    }\r\n\r\n\r\n    updateUser = async () =>{\r\n        const { url,paths } = this.props\r\n\r\n        const elements = document.querySelectorAll(\".updateBoxes\")\r\n        const { log } = this.props\r\n        const { logData } =this.state\r\n        console.log(log)\r\n        let tempArray = {\r\n            LanguageCode : log.LanguageCode,\r\n            PageName : log.PageName,\r\n            ResourceCode :  log.ResourceCode,\r\n            Resource : log.Resource\r\n        }\r\n        \r\n\r\n        elements.forEach((e,index)=>{\r\n            \r\n            \r\n            if((e.value.trim() !==\"\")){\r\n            \r\n\r\n                let key = Object.keys(tempArray)[index];\r\n                tempArray[key] = e.value\r\n               \r\n                \r\n            }\r\n        })\r\n       \r\n\r\n        this.setState({inserted : !this.state.inserted})\r\n\r\n\r\n\r\n        \r\n        \r\n        let options = {\r\n            method : \"POST\",\r\n            headers : {\r\n                \"Content-type\" : \"Application/json\"\r\n            },\r\n            body : JSON.stringify(tempArray)\r\n        }\r\n\r\n        let fetchUrl = url + paths.update + log.Id\r\n        \r\n        await fetch(fetchUrl,options).then(resp=>resp.json()).then(resp=>console.log(resp))\r\n        \r\n        this.updateTexts()\r\n        this.props.getLogs()\r\n    }\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        const { updateScreenState, isUpdate, log } = this.props\r\n        \r\n\r\n        return (\r\n\r\n\r\n\r\n\r\n            <div\r\n                className='updateMainContainer'\r\n                hidden={isUpdate}\r\n            >\r\n                <span className='material-symbols-outlined icon'\r\n                    onClick={() => {\r\n                        updateScreenState(!isUpdate)\r\n                    }}\r\n                >close</span>\r\n                <div className='updateContainer'>\r\n                    <div className='logData'>\r\n                        {Object.keys(log).map((e, index) => (\r\n                            <p\r\n                                \r\n                                style={{ fontWeight: 700 }}\r\n                                key={index}\r\n                            >{e.charAt(0).toUpperCase() + e.slice(1).toLowerCase() + \" : \"}<span className={index > 0 ? \"data\" : \"id\"} style={{ fontWeight: 500 }}>{Object.values(log)[index]}</span></p>\r\n                        ))}\r\n                    </div>\r\n\r\n\r\n                    <div className='updateInput'>\r\n                        {Object.values(log).map((e, index) => (\r\n                            <input\r\n                                key={index}\r\n                                className={index > 0 ? 'updateBoxes' : \"Id\"}\r\n                                style={{ outline: \"none\" }}\r\n                                placeholder={e}\r\n                            ></input>\r\n                        ))}\r\n\r\n                        <Button\r\n                            className='updateButton'\r\n                            color={\"dark\"}\r\n                            onClick={()=>{this.updateUser();}}\r\n                        ><span className='material-symbols-outlined'>edit</span></Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}